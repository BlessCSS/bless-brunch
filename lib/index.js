// Generated by CoffeeScript 1.6.2
var BlessCompiler, bless, fs, sysPath, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

bless = require('bless');

sysPath = require('path');

fs = require('fs');

_ = require('lodash');

module.exports = BlessCompiler = (function() {
  BlessCompiler.prototype.brunchPlugin = true;

  BlessCompiler.prototype.type = 'stylesheet';

  function BlessCompiler(config) {
    var defaultOptions, _ref, _ref1, _ref2;

    this.config = config;
    this.minify = __bind(this.minify, this);
    defaultOptions = {
      cacheBuster: true,
      cleanup: true,
      compress: true,
      force: false,
      imports: true
    };
    this.options = (_ref = (_ref1 = this.config) != null ? (_ref2 = _ref1.plugins) != null ? _ref2.bless : void 0 : void 0) != null ? _ref : {};
    this.options = _.merge(defaultOptions, this.options);
  }

  BlessCompiler.prototype.minify = function(data, path, callback) {
    var parser,
      _this = this;

    parser = new bless.Parser({
      output: path,
      options: this.options
    });
    return parser.parse(data, function(err, files, numSelectors) {
      var appCssFile, dir, file, filePath, _i, _len;

      if (err) {
        return callback(err, data);
      } else {
        appCssFile = null;
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          filePath = sysPath.join(__dirname, "../../../" + file.filename);
          dir = sysPath.dirname(filePath);
          if (sysPath.basename(filePath, '.css') === 'app') {
            appCssFile = file;
          } else {
            if (!fs.existsSync(dir)) {
              fs.mkdirSync(dir);
            }
            fs.writeFileSync(filePath, file.content);
          }
        }
        return callback(err, appCssFile.content);
      }
    });
  };

  return BlessCompiler;

})();
