// Generated by CoffeeScript 1.6.3
var BlessCompiler, bless, fs, path, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

bless = require('bless');

path = require('path');

fs = require('fs');

_ = require('lodash');

module.exports = BlessCompiler = (function() {
  BlessCompiler.prototype.brunchPlugin = true;

  BlessCompiler.prototype.type = 'stylesheet';

  function BlessCompiler(config) {
    var defaultOptions, _ref, _ref1, _ref2;
    this.config = config;
    this.onCompile = __bind(this.onCompile, this);
    defaultOptions = {
      cacheBuster: true,
      cleanup: true,
      compress: true,
      force: false,
      imports: true
    };
    this.options = (_ref = (_ref1 = this.config) != null ? (_ref2 = _ref1.plugins) != null ? _ref2.bless : void 0 : void 0) != null ? _ref : {};
    this.options = _.merge(defaultOptions, this.options);
  }

  BlessCompiler.prototype.onCompile = function(geenratedFiles) {
    var _this = this;
    return geenratedFiles.filter(function(file) {
      return path.extname(file.path) === '.css';
    }).forEach(function(cssfile) {
      var cssContent, parser;
      cssContent = fs.readFileSync(cssfile.path).toString();
      parser = new bless.Parser({
        output: cssfile.path,
        options: _this.options
      });
      return parser.parse(cssContent, function(err, files, numSelectors) {
        if (err) {
          throw err;
        }
        return _(files).forEach(function(file) {
          return fs.writeFileSync(file.filename, file.content);
        });
      });
    });
  };

  return BlessCompiler;

})();
